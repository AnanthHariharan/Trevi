{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext({socket:null,isConnected:false,lastMessage:null,sendMessage:()=>{}});export const WebSocketProvider=_ref=>{let{url,children}=_ref;const[socket,setSocket]=useState(null);const[isConnected,setIsConnected]=useState(false);const[lastMessage,setLastMessage]=useState(null);useEffect(()=>{const ws=new WebSocket(url);ws.onopen=()=>{console.log('WebSocket connected');setIsConnected(true);setSocket(ws);// Send ping message to keep connection alive\nconst pingInterval=setInterval(()=>{if(ws.readyState===WebSocket.OPEN){ws.send(JSON.stringify({type:'ping'}));}},30000);return()=>clearInterval(pingInterval);};ws.onmessage=event=>{setLastMessage(event.data);};ws.onclose=()=>{console.log('WebSocket disconnected');setIsConnected(false);setSocket(null);// Attempt to reconnect after 3 seconds\nsetTimeout(()=>{console.log('Attempting to reconnect...');// This will trigger the useEffect again\n},3000);};ws.onerror=error=>{console.error('WebSocket error:',error);setIsConnected(false);};return()=>{ws.close();};},[url]);const sendMessage=message=>{if(socket&&socket.readyState===WebSocket.OPEN){socket.send(JSON.stringify(message));}else{console.warn('WebSocket is not connected');}};return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:{socket,isConnected,lastMessage,sendMessage},children:children});};export const useWebSocket=()=>{const context=useContext(WebSocketContext);if(!context){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","WebSocketContext","socket","isConnected","lastMessage","sendMessage","WebSocketProvider","_ref","url","children","setSocket","setIsConnected","setLastMessage","ws","WebSocket","onopen","console","log","pingInterval","setInterval","readyState","OPEN","send","JSON","stringify","type","clearInterval","onmessage","event","data","onclose","setTimeout","onerror","error","close","message","warn","Provider","value","useWebSocket","context","Error"],"sources":["/Users/ananthhariharan/Documents/Projects/Trevi/meta_hrl/frontend/frontend/src/utils/websocket.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ninterface WebSocketContextType {\n  socket: WebSocket | null;\n  isConnected: boolean;\n  lastMessage: string | null;\n  sendMessage: (message: any) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType>({\n  socket: null,\n  isConnected: false,\n  lastMessage: null,\n  sendMessage: () => {},\n});\n\ninterface WebSocketProviderProps {\n  url: string;\n  children: ReactNode;\n}\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ url, children }) => {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<string | null>(null);\n\n  useEffect(() => {\n    const ws = new WebSocket(url);\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      setSocket(ws);\n      \n      // Send ping message to keep connection alive\n      const pingInterval = setInterval(() => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(JSON.stringify({ type: 'ping' }));\n        }\n      }, 30000);\n\n      return () => clearInterval(pingInterval);\n    };\n\n    ws.onmessage = (event) => {\n      setLastMessage(event.data);\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      setSocket(null);\n      \n      // Attempt to reconnect after 3 seconds\n      setTimeout(() => {\n        console.log('Attempting to reconnect...');\n        // This will trigger the useEffect again\n      }, 3000);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n\n    return () => {\n      ws.close();\n    };\n  }, [url]);\n\n  const sendMessage = (message: any) => {\n    if (socket && socket.readyState === WebSocket.OPEN) {\n      socket.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  };\n\n  return (\n    <WebSocketContext.Provider\n      value={{\n        socket,\n        isConnected,\n        lastMessage,\n        sendMessage,\n      }}\n    >\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\nexport const useWebSocket = () => {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}